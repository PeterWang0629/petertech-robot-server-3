name: Auto Release

on:
  push:
    branches:
      - main
      - dev

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Git
      run: |
        git fetch --tags
        git config --global --add safe.directory '*'
    
    - name: Extract commit information
      id: commit_info
      run: |
        COMMIT_HASH=$(git rev-parse --short=7 HEAD)
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        # 转换换行符
        COMMIT_MESSAGE=$(echo "${COMMIT_MESSAGE}" | tr '\n' 'BACKSLASH_N')
        echo "commit_hash=${COMMIT_HASH}" >> $GITHUB_ENV
        echo "commit_message=${COMMIT_MESSAGE}" >> $GITHUB_ENV

    - name: Determine version type and stability
      id: version_info
      run: |
        echo "COMMIT_MESSAGE '${{ env.commit_message }}'"
        if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          VERSION_TYPE="release"
        elif [[ "${{ env.commit_message }}" == *"<insider>"* ]]; then
          VERSION_TYPE="insider"
        elif [[ "${{ env.commit_message }}" == *"<alpha>"* ]]; then
          VERSION_TYPE="alpha"
        elif [[ "${{ env.commit_message }}" == *"<beta>"* ]]; then
          VERSION_TYPE="beta"
        elif [[ "${{ env.commit_message }}" == *"<rc>"* ]]; then
          VERSION_TYPE="rc"
        else
          VERSION_TYPE="development"
        fi
        echo "VERSION_TYPE '${VERSION_TYPE}'"
        echo "version_type=${VERSION_TYPE}" >> $GITHUB_ENV

    - name: Calculate main and dev versions
      id: version_calculation
      run: |
        git fetch origin
        LAST_main_COMMIT=$(git rev-list origin/main --max-count=1)
        main_VERSION=$(git rev-list --count origin/main)
        DEV_VERSION=0
        if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
          DEV_VERSION=$(git rev-list --count "${LAST_main_COMMIT}..HEAD")
        fi
        echo "main_version=${main_VERSION}" >> $GITHUB_ENV
        echo "dev_version=${DEV_VERSION}" >> $GITHUB_ENV

    - name: Create Release version string
      id: create_version_string
      run: |
        BRANCH_NAME=$(echo "${{ github.ref }}" | awk -F'/' '{print $NF}')
        VERSION_STRING="${{ env.version_type }}.${{ env.main_version }}.${{ env.dev_version }}.${{ env.commit_hash }}@${BRANCH_NAME}"
        echo "release_version=${VERSION_STRING}" >> $GITHUB_ENV

    - name: Create release notes
      id: create_release_notes
      run: |
        # 将 commit message 中的换行符转换为可读格式
        
        # 确保 RELEASE_NOTES 包含版本信息
        RELEASE_NOTES="${{ env.commit_message }}\n\n${{ env.version_type }} version"
        RELEASE_NOTES_CLEAN=$(echo "${RELEASE_NOTES}" | tr '\n' 'BACKSLASH_N')
        echo "release_notes=${RELEASE_NOTES_CLEAN}" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.release_version }}
        release_name: ${{ env.release_version }}
        body: ${{ env.release_notes // BACKSLASH_N/$'\n' }}
        draft: false
        prerelease: ${{ env.version_type != 'release' }}
